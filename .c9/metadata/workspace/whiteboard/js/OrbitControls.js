{"filter":false,"title":"OrbitControls.js","tooltip":"/whiteboard/js/OrbitControls.js","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":1114,"column":6},"action":"insert","lines":["/**"," * @author qiao / https://github.com/qiao"," * @author mrdoob / http://mrdoob.com"," * @author alteredq / http://alteredqualia.com/"," * @author WestLangley / http://github.com/WestLangley"," * @author erich666 / http://erichaines.com"," */","/*global THREE, console */","","( function () {","","\tfunction OrbitConstraint ( object ) {","","\t\tthis.object = object;","","\t\t// \"target\" sets the location of focus, where the object orbits around","\t\t// and where it pans with respect to.","\t\tthis.target = new THREE.Vector3();","","\t\t// Limits to how far you can dolly in and out ( PerspectiveCamera only )","\t\tthis.minDistance = 0;","\t\tthis.maxDistance = Infinity;","","\t\t// Limits to how far you can zoom in and out ( OrthographicCamera only )","\t\tthis.minZoom = 0;","\t\tthis.maxZoom = Infinity;","","\t\t// How far you can orbit vertically, upper and lower limits.","\t\t// Range is 0 to Math.PI radians.","\t\tthis.minPolarAngle = 0; // radians","\t\tthis.maxPolarAngle = Math.PI; // radians","","\t\t// How far you can orbit horizontally, upper and lower limits.","\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].","\t\tthis.minAzimuthAngle = - Infinity; // radians","\t\tthis.maxAzimuthAngle = Infinity; // radians","","\t\t// Set to true to enable damping (inertia)","\t\t// If damping is enabled, you must call controls.update() in your animation loop","\t\tthis.enableDamping = false;","\t\tthis.dampingFactor = 0.25;","","\t\t////////////","\t\t// internals","","\t\tvar scope = this;","","\t\tvar EPS = 0.000001;","","\t\t// Current position in spherical coordinate system.","\t\tvar theta;","\t\tvar phi;","","\t\t// Pending changes","\t\tvar phiDelta = 0;","\t\tvar thetaDelta = 0;","\t\tvar scale = 1;","\t\tvar panOffset = new THREE.Vector3();","\t\tvar zoomChanged = false;","","\t\t// API","","\t\tthis.getPolarAngle = function () {","","\t\t\treturn phi;","","\t\t};","","\t\tthis.getAzimuthalAngle = function () {","","\t\t\treturn theta;","","\t\t};","","\t\tthis.rotateLeft = function ( angle ) {","","\t\t\tthetaDelta -= angle;","","\t\t};","","\t\tthis.rotateUp = function ( angle ) {","","\t\t\tphiDelta -= angle;","","\t\t};","","\t\t// pass in distance in world space to move left","\t\tthis.panLeft = function() {","","\t\t\tvar v = new THREE.Vector3();","","\t\t\treturn function panLeft ( distance ) {","","\t\t\t\tvar te = this.object.matrix.elements;","","\t\t\t\t// get X column of matrix","\t\t\t\tv.set( te[ 0 ], te[ 1 ], te[ 2 ] );","\t\t\t\tv.multiplyScalar( - distance );","","\t\t\t\tpanOffset.add( v );","","\t\t\t};","","\t\t}();","","\t\t// pass in distance in world space to move up","\t\tthis.panUp = function() {","","\t\t\tvar v = new THREE.Vector3();","","\t\t\treturn function panUp ( distance ) {","","\t\t\t\tvar te = this.object.matrix.elements;","","\t\t\t\t// get Y column of matrix","\t\t\t\tv.set( te[ 4 ], te[ 5 ], te[ 6 ] );","\t\t\t\tv.multiplyScalar( distance );","","\t\t\t\tpanOffset.add( v );","","\t\t\t};","","\t\t}();","","\t\t// pass in x,y of change desired in pixel space,","\t\t// right and down are positive","\t\tthis.pan = function ( deltaX, deltaY, screenWidth, screenHeight ) {","","\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {","","\t\t\t\t// perspective","\t\t\t\tvar position = scope.object.position;","\t\t\t\tvar offset = position.clone().sub( scope.target );","\t\t\t\tvar targetDistance = offset.length();","","\t\t\t\t// half of the fov is center to top of screen","\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );","","\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height","\t\t\t\tscope.panLeft( 2 * deltaX * targetDistance / screenHeight );","\t\t\t\tscope.panUp( 2 * deltaY * targetDistance / screenHeight );","","\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {","","\t\t\t\t// orthographic","\t\t\t\tscope.panLeft( deltaX * ( scope.object.right - scope.object.left ) / screenWidth );","\t\t\t\tscope.panUp( deltaY * ( scope.object.top - scope.object.bottom ) / screenHeight );","","\t\t\t} else {","","\t\t\t\t// camera neither orthographic or perspective","\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );","","\t\t\t}","","\t\t};","","\t\tthis.dollyIn = function ( dollyScale ) {","","\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {","","\t\t\t\tscale /= dollyScale;","","\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {","","\t\t\t\tscope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom * dollyScale ) );","\t\t\t\tscope.object.updateProjectionMatrix();","\t\t\t\tzoomChanged = true;","","\t\t\t} else {","","\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );","","\t\t\t}","","\t\t};","","\t\tthis.dollyOut = function ( dollyScale ) {","","\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {","","\t\t\t\tscale *= dollyScale;","","\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {","","\t\t\t\tscope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / dollyScale ) );","\t\t\t\tscope.object.updateProjectionMatrix();","\t\t\t\tzoomChanged = true;","","\t\t\t} else {","","\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );","","\t\t\t}","","\t\t};","","\t\tthis.update = function() {","","\t\t\tvar offset = new THREE.Vector3();","","\t\t\t// so camera.up is the orbit axis","\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );","\t\t\tvar quatInverse = quat.clone().inverse();","","\t\t\tvar lastPosition = new THREE.Vector3();","\t\t\tvar lastQuaternion = new THREE.Quaternion();","","\t\t\treturn function () {","","\t\t\t\tvar position = this.object.position;","","\t\t\t\toffset.copy( position ).sub( this.target );","","\t\t\t\t// rotate offset to \"y-axis-is-up\" space","\t\t\t\toffset.applyQuaternion( quat );","","\t\t\t\t// angle from z-axis around y-axis","","\t\t\t\ttheta = Math.atan2( offset.x, offset.z );","","\t\t\t\t// angle from y-axis","","\t\t\t\tphi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );","","\t\t\t\ttheta += thetaDelta;","\t\t\t\tphi += phiDelta;","","\t\t\t\t// restrict theta to be between desired limits","\t\t\t\ttheta = Math.max( this.minAzimuthAngle, Math.min( this.maxAzimuthAngle, theta ) );","","\t\t\t\t// restrict phi to be between desired limits","\t\t\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );","","\t\t\t\t// restrict phi to be betwee EPS and PI-EPS","\t\t\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );","","\t\t\t\tvar radius = offset.length() * scale;","","\t\t\t\t// restrict radius to be between desired limits","\t\t\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );","","\t\t\t\t// move target to panned location","\t\t\t\tthis.target.add( panOffset );","","\t\t\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );","\t\t\t\toffset.y = radius * Math.cos( phi );","\t\t\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );","","\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space","\t\t\t\toffset.applyQuaternion( quatInverse );","","\t\t\t\tposition.copy( this.target ).add( offset );","","\t\t\t\tthis.object.lookAt( this.target );","","\t\t\t\tif ( this.enableDamping === true ) {","","\t\t\t\t\tthetaDelta *= ( 1 - this.dampingFactor );","\t\t\t\t\tphiDelta *= ( 1 - this.dampingFactor );","","\t\t\t\t} else {","","\t\t\t\t\tthetaDelta = 0;","\t\t\t\t\tphiDelta = 0;","","\t\t\t\t}","","\t\t\t\tscale = 1;","\t\t\t\tpanOffset.set( 0, 0, 0 );","","\t\t\t\t// update condition is:","\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS","\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8","","\t\t\t\tif ( zoomChanged ||","\t\t\t\t\t lastPosition.distanceToSquared( this.object.position ) > EPS ||","\t\t\t\t    8 * ( 1 - lastQuaternion.dot( this.object.quaternion ) ) > EPS ) {","","\t\t\t\t\tlastPosition.copy( this.object.position );","\t\t\t\t\tlastQuaternion.copy( this.object.quaternion );","\t\t\t\t\tzoomChanged = false;","","\t\t\t\t\treturn true;","","\t\t\t\t}","","\t\t\t\treturn false;","","\t\t\t};","","\t\t}();","","\t};","","","\t// This set of controls performs orbiting, dollying (zooming), and panning. It maintains","\t// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is","\t// supported.","\t//","\t//    Orbit - left mouse / touch: one finger move","\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish","\t//    Pan - right mouse, or arrow keys / touch: three finter swipe","","\tTHREE.OrbitControls = function ( object, domElement ) {","","\t\tvar constraint = new OrbitConstraint( object );","","\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;","","\t\t// API","","\t\tObject.defineProperty( this, 'constraint', {","","\t\t\tget: function() {","","\t\t\t\treturn constraint;","","\t\t\t}","","\t\t} );","","\t\tthis.getPolarAngle = function () {","","\t\t\treturn constraint.getPolarAngle();","","\t\t};","","\t\tthis.getAzimuthalAngle = function () {","","\t\t\treturn constraint.getAzimuthalAngle();","","\t\t};","","\t\t// Set to false to disable this control","\t\tthis.enabled = true;","","\t\t// center is old, deprecated; use \"target\" instead","\t\tthis.center = this.target;","","\t\t// This option actually enables dollying in and out; left as \"zoom\" for","\t\t// backwards compatibility.","\t\t// Set to false to disable zooming","\t\tthis.enableZoom = true;","\t\tthis.zoomSpeed = 1.0;","","\t\t// Set to false to disable rotating","\t\tthis.enableRotate = true;","\t\tthis.rotateSpeed = 1.0;","","\t\t// Set to false to disable panning","\t\tthis.enablePan = true;","\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push","","\t\t// Set to true to automatically rotate around the target","\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop","\t\tthis.autoRotate = false;","\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60","","\t\t// Set to false to disable use of the keys","\t\tthis.enableKeys = true;","","\t\t// The four arrow keys","\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };","","\t\t// Mouse buttons","\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };","","\t\t////////////","\t\t// internals","","\t\tvar scope = this;","","\t\tvar rotateStart = new THREE.Vector2();","\t\tvar rotateEnd = new THREE.Vector2();","\t\tvar rotateDelta = new THREE.Vector2();","","\t\tvar panStart = new THREE.Vector2();","\t\tvar panEnd = new THREE.Vector2();","\t\tvar panDelta = new THREE.Vector2();","","\t\tvar dollyStart = new THREE.Vector2();","\t\tvar dollyEnd = new THREE.Vector2();","\t\tvar dollyDelta = new THREE.Vector2();","","\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };","","\t\tvar state = STATE.NONE;","","\t\t// for reset","","\t\tthis.target0 = this.target.clone();","\t\tthis.position0 = this.object.position.clone();","\t\tthis.zoom0 = this.object.zoom;","","\t\t// events","","\t\tvar changeEvent = { type: 'change' };","\t\tvar startEvent = { type: 'start' };","\t\tvar endEvent = { type: 'end' };","","\t\t// pass in x,y of change desired in pixel space,","\t\t// right and down are positive","\t\tfunction pan( deltaX, deltaY ) {","","\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;","","\t\t\tconstraint.pan( deltaX, deltaY, element.clientWidth, element.clientHeight );","","\t\t}","","\t\tthis.update = function () {","","\t\t\tif ( this.autoRotate && state === STATE.NONE ) {","","\t\t\t\tconstraint.rotateLeft( getAutoRotationAngle() );","","\t\t\t}","","\t\t\tif ( constraint.update() === true ) {","","\t\t\t\tthis.dispatchEvent( changeEvent );","","\t\t\t}","","\t\t};","","\t\tthis.reset = function () {","","\t\t\tstate = STATE.NONE;","","\t\t\tthis.target.copy( this.target0 );","\t\t\tthis.object.position.copy( this.position0 );","\t\t\tthis.object.zoom = this.zoom0;","","\t\t\tthis.object.updateProjectionMatrix();","\t\t\tthis.dispatchEvent( changeEvent );","","\t\t\tthis.update();","","\t\t};","","\t\tfunction getAutoRotationAngle() {","","\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;","","\t\t}","","\t\tfunction getZoomScale() {","","\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );","","\t\t}","","\t\tfunction onMouseDown( event ) {","","\t\t\tif ( scope.enabled === false ) return;","","\t\t\tevent.preventDefault();","","\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {","","\t\t\t\tif ( scope.enableRotate === false ) return;","","\t\t\t\tstate = STATE.ROTATE;","","\t\t\t\trotateStart.set( event.clientX, event.clientY );","","\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {","","\t\t\t\tif ( scope.enableZoom === false ) return;","","\t\t\t\tstate = STATE.DOLLY;","","\t\t\t\tdollyStart.set( event.clientX, event.clientY );","","\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {","","\t\t\t\tif ( scope.enablePan === false ) return;","","\t\t\t\tstate = STATE.PAN;","","\t\t\t\tpanStart.set( event.clientX, event.clientY );","","\t\t\t}","","\t\t\tif ( state !== STATE.NONE ) {","","\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );","\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );","\t\t\t\tscope.dispatchEvent( startEvent );","","\t\t\t}","","\t\t}","","\t\tfunction onMouseMove( event ) {","","\t\t\tif ( scope.enabled === false ) return;","","\t\t\tevent.preventDefault();","","\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;","","\t\t\tif ( state === STATE.ROTATE ) {","","\t\t\t\tif ( scope.enableRotate === false ) return;","","\t\t\t\trotateEnd.set( event.clientX, event.clientY );","\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );","","\t\t\t\t// rotating across whole screen goes 360 degrees around","\t\t\t\tconstraint.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );","","\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180","\t\t\t\tconstraint.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );","","\t\t\t\trotateStart.copy( rotateEnd );","","\t\t\t} else if ( state === STATE.DOLLY ) {","","\t\t\t\tif ( scope.enableZoom === false ) return;","","\t\t\t\tdollyEnd.set( event.clientX, event.clientY );","\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );","","\t\t\t\tif ( dollyDelta.y > 0 ) {","","\t\t\t\t\tconstraint.dollyIn( getZoomScale() );","","\t\t\t\t} else if ( dollyDelta.y < 0 ) {","","\t\t\t\t\tconstraint.dollyOut( getZoomScale() );","","\t\t\t\t}","","\t\t\t\tdollyStart.copy( dollyEnd );","","\t\t\t} else if ( state === STATE.PAN ) {","","\t\t\t\tif ( scope.enablePan === false ) return;","","\t\t\t\tpanEnd.set( event.clientX, event.clientY );","\t\t\t\tpanDelta.subVectors( panEnd, panStart );","","\t\t\t\tpan( panDelta.x, panDelta.y );","","\t\t\t\tpanStart.copy( panEnd );","","\t\t\t}","","\t\t\tif ( state !== STATE.NONE ) scope.update();","","\t\t}","","\t\tfunction onMouseUp( /* event */ ) {","","\t\t\tif ( scope.enabled === false ) return;","","\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );","\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );","\t\t\tscope.dispatchEvent( endEvent );","\t\t\tstate = STATE.NONE;","","\t\t}","","\t\tfunction onMouseWheel( event ) {","","\t\t\tif ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;","","\t\t\tevent.preventDefault();","\t\t\tevent.stopPropagation();","","\t\t\tvar delta = 0;","","\t\t\tif ( event.wheelDelta !== undefined ) {","","\t\t\t\t// WebKit / Opera / Explorer 9","","\t\t\t\tdelta = event.wheelDelta;","","\t\t\t} else if ( event.detail !== undefined ) {","","\t\t\t\t// Firefox","","\t\t\t\tdelta = - event.detail;","","\t\t\t}","","\t\t\tif ( delta > 0 ) {","","\t\t\t\tconstraint.dollyOut( getZoomScale() );","","\t\t\t} else if ( delta < 0 ) {","","\t\t\t\tconstraint.dollyIn( getZoomScale() );","","\t\t\t}","","\t\t\tscope.update();","\t\t\tscope.dispatchEvent( startEvent );","\t\t\tscope.dispatchEvent( endEvent );","","\t\t}","","\t\tfunction onKeyDown( event ) {","","\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;","","\t\t\tswitch ( event.keyCode ) {","","\t\t\t\tcase scope.keys.UP:","\t\t\t\t\tpan( 0, scope.keyPanSpeed );","\t\t\t\t\tscope.update();","\t\t\t\t\tbreak;","","\t\t\t\tcase scope.keys.BOTTOM:","\t\t\t\t\tpan( 0, - scope.keyPanSpeed );","\t\t\t\t\tscope.update();","\t\t\t\t\tbreak;","","\t\t\t\tcase scope.keys.LEFT:","\t\t\t\t\tpan( scope.keyPanSpeed, 0 );","\t\t\t\t\tscope.update();","\t\t\t\t\tbreak;","","\t\t\t\tcase scope.keys.RIGHT:","\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );","\t\t\t\t\tscope.update();","\t\t\t\t\tbreak;","","\t\t\t}","","\t\t}","","\t\tfunction touchstart( event ) {","","\t\t\tif ( scope.enabled === false ) return;","","\t\t\tswitch ( event.touches.length ) {","","\t\t\t\tcase 1:\t// one-fingered touch: rotate","","\t\t\t\t\tif ( scope.enableRotate === false ) return;","","\t\t\t\t\tstate = STATE.TOUCH_ROTATE;","","\t\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );","\t\t\t\t\tbreak;","","\t\t\t\tcase 2:\t// two-fingered touch: dolly","","\t\t\t\t\tif ( scope.enableZoom === false ) return;","","\t\t\t\t\tstate = STATE.TOUCH_DOLLY;","","\t\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;","\t\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;","\t\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );","\t\t\t\t\tdollyStart.set( 0, distance );","\t\t\t\t\tbreak;","","\t\t\t\tcase 3: // three-fingered touch: pan","","\t\t\t\t\tif ( scope.enablePan === false ) return;","","\t\t\t\t\tstate = STATE.TOUCH_PAN;","","\t\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );","\t\t\t\t\tbreak;","","\t\t\t\tdefault:","","\t\t\t\t\tstate = STATE.NONE;","","\t\t\t}","","\t\t\tif ( state !== STATE.NONE ) scope.dispatchEvent( startEvent );","","\t\t}","","\t\tfunction touchmove( event ) {","","\t\t\tif ( scope.enabled === false ) return;","","\t\t\tevent.preventDefault();","\t\t\tevent.stopPropagation();","","\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;","","\t\t\tswitch ( event.touches.length ) {","","\t\t\t\tcase 1: // one-fingered touch: rotate","","\t\t\t\t\tif ( scope.enableRotate === false ) return;","\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return;","","\t\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );","\t\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );","","\t\t\t\t\t// rotating across whole screen goes 360 degrees around","\t\t\t\t\tconstraint.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );","\t\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180","\t\t\t\t\tconstraint.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );","","\t\t\t\t\trotateStart.copy( rotateEnd );","","\t\t\t\t\tscope.update();","\t\t\t\t\tbreak;","","\t\t\t\tcase 2: // two-fingered touch: dolly","","\t\t\t\t\tif ( scope.enableZoom === false ) return;","\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return;","","\t\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;","\t\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;","\t\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );","","\t\t\t\t\tdollyEnd.set( 0, distance );","\t\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );","","\t\t\t\t\tif ( dollyDelta.y > 0 ) {","","\t\t\t\t\t\tconstraint.dollyOut( getZoomScale() );","","\t\t\t\t\t} else if ( dollyDelta.y < 0 ) {","","\t\t\t\t\t\tconstraint.dollyIn( getZoomScale() );","","\t\t\t\t\t}","","\t\t\t\t\tdollyStart.copy( dollyEnd );","","\t\t\t\t\tscope.update();","\t\t\t\t\tbreak;","","\t\t\t\tcase 3: // three-fingered touch: pan","","\t\t\t\t\tif ( scope.enablePan === false ) return;","\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return;","","\t\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );","\t\t\t\t\tpanDelta.subVectors( panEnd, panStart );","","\t\t\t\t\tpan( panDelta.x, panDelta.y );","","\t\t\t\t\tpanStart.copy( panEnd );","","\t\t\t\t\tscope.update();","\t\t\t\t\tbreak;","","\t\t\t\tdefault:","","\t\t\t\t\tstate = STATE.NONE;","","\t\t\t}","","\t\t}","","\t\tfunction touchend( /* event */ ) {","","\t\t\tif ( scope.enabled === false ) return;","","\t\t\tscope.dispatchEvent( endEvent );","\t\t\tstate = STATE.NONE;","","\t\t}","","\t\tfunction contextmenu( event ) {","","\t\t\tevent.preventDefault();","","\t\t}","","\t\tthis.dispose = function() {","","\t\t\tthis.domElement.removeEventListener( 'contextmenu', contextmenu, false );","\t\t\tthis.domElement.removeEventListener( 'mousedown', onMouseDown, false );","\t\t\tthis.domElement.removeEventListener( 'mousewheel', onMouseWheel, false );","\t\t\tthis.domElement.removeEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox","","\t\t\tthis.domElement.removeEventListener( 'touchstart', touchstart, false );","\t\t\tthis.domElement.removeEventListener( 'touchend', touchend, false );","\t\t\tthis.domElement.removeEventListener( 'touchmove', touchmove, false );","","\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );","\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );","","\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );","","\t\t}","","\t\tthis.domElement.addEventListener( 'contextmenu', contextmenu, false );","","\t\tthis.domElement.addEventListener( 'mousedown', onMouseDown, false );","\t\tthis.domElement.addEventListener( 'mousewheel', onMouseWheel, false );","\t\tthis.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox","","\t\tthis.domElement.addEventListener( 'touchstart', touchstart, false );","\t\tthis.domElement.addEventListener( 'touchend', touchend, false );","\t\tthis.domElement.addEventListener( 'touchmove', touchmove, false );","","\t\twindow.addEventListener( 'keydown', onKeyDown, false );","","\t\t// force an update at start","\t\tthis.update();","","\t};","","\tTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );","\tTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;","","\tObject.defineProperties( THREE.OrbitControls.prototype, {","","\t\tobject: {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.object;","","\t\t\t}","","\t\t},","","\t\ttarget: {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.target;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: target is now immutable. Use target.set() instead.' );","\t\t\t\tthis.constraint.target.copy( value );","","\t\t\t}","","\t\t},","","\t\tminDistance : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.minDistance;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.minDistance = value;","","\t\t\t}","","\t\t},","","\t\tmaxDistance : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.maxDistance;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.maxDistance = value;","","\t\t\t}","","\t\t},","","\t\tminZoom : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.minZoom;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.minZoom = value;","","\t\t\t}","","\t\t},","","\t\tmaxZoom : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.maxZoom;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.maxZoom = value;","","\t\t\t}","","\t\t},","","\t\tminPolarAngle : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.minPolarAngle;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.minPolarAngle = value;","","\t\t\t}","","\t\t},","","\t\tmaxPolarAngle : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.maxPolarAngle;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.maxPolarAngle = value;","","\t\t\t}","","\t\t},","","\t\tminAzimuthAngle : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.minAzimuthAngle;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.minAzimuthAngle = value;","","\t\t\t}","","\t\t},","","\t\tmaxAzimuthAngle : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.maxAzimuthAngle;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.maxAzimuthAngle = value;","","\t\t\t}","","\t\t},","","\t\tenableDamping : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.enableDamping;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.enableDamping = value;","","\t\t\t}","","\t\t},","","\t\tdampingFactor : {","","\t\t\tget: function () {","","\t\t\t\treturn this.constraint.dampingFactor;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tthis.constraint.dampingFactor = value;","","\t\t\t}","","\t\t},","","\t\t// backward compatibility","","\t\tnoZoom: {","","\t\t\tget: function () {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );","\t\t\t\treturn ! this.enableZoom;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );","\t\t\t\tthis.enableZoom = ! value;","","\t\t\t}","","\t\t},","","\t\tnoRotate: {","","\t\t\tget: function () {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );","\t\t\t\treturn ! this.enableRotate;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );","\t\t\t\tthis.enableRotate = ! value;","","\t\t\t}","","\t\t},","","\t\tnoPan: {","","\t\t\tget: function () {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );","\t\t\t\treturn ! this.enablePan;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );","\t\t\t\tthis.enablePan = ! value;","","\t\t\t}","","\t\t},","","\t\tnoKeys: {","","\t\t\tget: function () {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );","\t\t\t\treturn ! this.enableKeys;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );","\t\t\t\tthis.enableKeys = ! value;","","\t\t\t}","","\t\t},","","\t\tstaticMoving : {","","\t\t\tget: function () {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );","\t\t\t\treturn ! this.constraint.enableDamping;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );","\t\t\t\tthis.constraint.enableDamping = ! value;","","\t\t\t}","","\t\t},","","\t\tdynamicDampingFactor : {","","\t\t\tget: function () {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );","\t\t\t\treturn this.constraint.dampingFactor;","","\t\t\t},","","\t\t\tset: function ( value ) {","","\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );","\t\t\t\tthis.constraint.dampingFactor = value;","","\t\t\t}","","\t\t}","","\t} );","","}() );"],"id":1}]]},"ace":{"folds":[],"scrolltop":360,"scrollleft":0,"selection":{"start":{"row":167,"column":4},"end":{"row":167,"column":15},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":20,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1444692044959,"hash":"bc0d298ee13dd2485638ba183a9aea7aaa5823e4"}